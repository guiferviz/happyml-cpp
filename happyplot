#! /usr/bin/octave -qf

% =====================================================
% HAPPYPLOT - Octave program.
% =====================================================

POINTS_FILE = 'points.data';
BOUNDARY_FILE = 'boundary.data';
LINE_FILE = 'line.data';
OUTPUT_FILE = 'output.png';

% Reading parameters.
arg_list = argv()
if mod(size(arg_list, 1), 2) == 0
    for i = 1:2:size(arg_list)
        disp("hoooola")
        disp(i)
        if strcmp(arg_list{i}, '-o')
            OUTPUT_FILE = arg_list{i + 1};
        elseif strcmp(arg_list{i}, '-b')
            BOUNDARY_FILE = arg_list{i + 1};
        elseif strcmp(arg_list{i}, '-d')
            POINTS_FILE = arg_list{i + 1};
        elseif strcmp(arg_list{i}, '-l')
            LINE_FILE = arg_list{i + 1};
        else
            error('ERROR: %s unknow parameter.', arg_list{i});
        end
    end
else
    if strcmp(arg_list{1}, '-h') || strcmp(arg_list{1}, '--help')
        system("man happyplot");
        exit();
    else
        error('ERROR: Not enough input arguments.');
    end
end

POINTS_FILE
BOUNDARY_FILE
LINE_FILE
OUTPUT_FILE


% ------------------------------------------------------------------------------
close all;
figure(1);
hold on;


% ------------------------------------------------------------------------------
if exist(BOUNDARY_FILE, "file")
    fprintf('\nDrawing boundary.\n');

    data = importdata(BOUNDARY_FILE, ",", 2);
    z = flipud(data.data);  % Flip up-down before use contourf.
    headers = data.textdata;

    [u_start, u_end, u_size] = strread(headers{1}, "%f,%f,%f");
    [v_start, v_end, v_size] = strread(headers{2}, "%f,%f,%f");
    u = linspace(u_start, u_end, u_size);
    v = linspace(v_start, v_end, v_size);

    colormap([
        0.6,0.35,0.35;  % Red color.
        0.35,0.35,0.6   % Blue color.
    ])
    % The levels of the contour depends on whether the outputs are almost all
    % +-1 or if they have decimals and are near to 0.
    levels = [];
    if sum(sum(abs(z))) == u_size * v_size
        levels = [-1 1];
    else
        % Using 1.0001 to avoid that appears more lines if the output is
        % exactly 1.
        levels = [-1.0001 0 1.0001];
    end
    % Drawing the contour. Set the line color to a colormap color to 'hide'
    % the lines of the contour.
    contourf(u, v, z, levels, 'LineWidth', 4, 'LineColor', 'black');

    fprintf('\nAdjust axes for better viewing.\n');
    axis([u_start u_end v_start v_end], "square");
end

% ------------------------------------------------------------------------------
if exist(LINE_FILE, "file")
    fprintf('\nDrawing line.\n');
    data = importdata(LINE_FILE, ",", 1);
    v = data.data;
    headers = data.textdata;

    [u_start, u_end, u_size] = strread(headers{1}, "%f,%f,%f");
    u = linspace(u_start, u_end, u_size);
        
    plot(u, v, '-', 'LineWidth', 4, 'color', 'magenta');
        
    fprintf('\nAdjust axes for better viewing.\n');
    axis([u_start u_end], "square");
end


% ------------------------------------------------------------------------------
if exist(POINTS_FILE, 'file')
    fprintf('\nDrawing data.\n');
    
    data = load(POINTS_FILE);
    [N, d] = size(data);
    d = d - 1;  % Output is not a dimension.
    X = data(:, 1:d);
    y = data(:, d + 1);
    
    if d == 1
        if sum(abs(y)) == N
            X = [X zeros(N, 1)];
            d = 2;
        end
    end
    
    if d == 2
        iPositive = find(y ==  1);
        iNegative = find(y == -1);
        plot(X(iPositive, 1), X(iPositive, 2), 'k.', 'MarkerSize', 25, 'color', 'blue');
        plot(X(iNegative, 1), X(iNegative, 2), 'k.', 'MarkerSize', 25, 'color', 'red');
    else  % Linear regression data.
        plot(X, y, 'k.', 'MarkerSize', 25, 'color', 'green');
    end
end


% ------------------------------------------------------------------------------
fprintf('\nSaving to a file (%s).\n', OUTPUT_FILE);

% Axis font size.
set(gca, "fontsize", 20)
print("png", OUTPUT_FILE);%, "-S640,480")

hold off;

%fprintf('\nPause. Press enter to continue.\n');
%pause;
